# Problem:
# Given the cases of rubik's cube, return the status of the top.

# My Solution:
import copy


def rotate(c, w):
    if w[0] == 'U':
        if w[1] == '+':
            c[0] = (list(map(list, list(zip(*c[0])))))
            for i in range(len(c[0])):
                c[0][i].reverse()
            c[2][0], c[3][0], c[4][0], c[5][0] = c[4][0], c[5][0], c[3][0], c[2][0]
        else:
            c[0] = (list(map(list, list(zip(*c[0])))))
            c[0].reverse()
            c[2][0], c[3][0], c[4][0], c[5][0] = c[5][0], c[4][0], c[2][0], c[3][0]

    elif w[0] == 'D':
        if w[1] == '+':
            c[1] = (list(map(list, list(zip(*c[1])))))
            for i in range(len(c[1])):
                c[1][i].reverse()
            c[2][-1], c[3][-1], c[4][-1], c[5][-1] = c[5][-1], c[4][-1], c[2][-1], c[3][-1]
        else:
            c[1] = (list(map(list, list(zip(*c[1])))))
            c[1].reverse()
            c[2][-1], c[3][-1], c[4][-1], c[5][-1] = c[4][-1], c[5][-1], c[3][-1], c[2][-1]

    elif w[0] == 'L':
        if w[1] == '+':
            c[2] = (list(map(list, list(zip(*c[2])))))
            for i in range(len(c[2])):
                c[2][i].reverse()
            c[0][0][0], c[0][1][0], c[0][2][0], c[1][0][0], c[1][1][0], c[1][2][0], c[4][0][0], c[4][1][0], c[4][2][0], \
            c[5][0][-1], c[5][1][-1], c[5][2][-1] = c[5][2][-1], c[5][1][-1], c[5][0][-1], c[4][0][0], c[4][1][0], \
                                                    c[4][2][0], c[0][0][0], c[0][1][0], c[0][2][0], c[1][2][0], c[1][1][
                                                        0], c[1][0][0]
        else:
            c[2] = (list(map(list, list(zip(*c[2])))))
            c[2].reverse()
            c[0][0][0], c[0][1][0], c[0][2][0], c[1][0][0], c[1][1][0], c[1][2][0], c[4][0][0], c[4][1][0], c[4][2][0], \
            c[5][0][-1], c[5][1][-1], c[5][2][-1] = c[4][0][0], c[4][1][0], c[4][2][0], c[5][2][-1], c[5][1][-1], \
                                                    c[5][0][-1], c[1][0][0], c[1][1][0], c[1][2][0], c[0][2][0], \
                                                    c[0][1][0], c[0][0][0]

    elif w[0] == 'R':
        if w[1] == '+':
            c[3] = (list(map(list, list(zip(*c[3])))))
            for i in range(len(c[3])):
                c[3][i].reverse()
            c[0][0][-1], c[0][1][-1], c[0][2][-1], c[1][0][-1], c[1][1][-1], c[1][2][-1], c[4][0][-1], c[4][1][-1], \
            c[4][2][-1], c[5][0][0], c[5][1][0], c[5][2][0] = c[4][0][-1], c[4][1][-1], c[4][2][-1], c[5][2][0], \
                                                              c[5][1][0], c[5][0][0], c[1][0][-1], c[1][1][-1], c[1][2][
                                                                  -1], c[0][2][-1], c[0][1][-1], c[0][0][-1]
        else:
            c[3] = (list(map(list, list(zip(*c[3])))))
            c[3].reverse()
            c[0][0][-1], c[0][1][-1], c[0][2][-1], c[1][0][-1], c[1][1][-1], c[1][2][-1], c[4][0][-1], c[4][1][-1], \
            c[4][2][-1], c[5][0][0], c[5][1][0], c[5][2][0] = c[5][2][0], c[5][1][0], c[5][0][0], c[4][0][-1], c[4][1][
                -1], c[4][2][-1], c[0][0][-1], c[0][1][-1], c[0][2][-1], c[1][2][-1], c[1][1][-1], c[1][0][-1]

    elif w[0] == 'F':
        if w[1] == '+':
            c[4] = (list(map(list, list(zip(*c[4])))))
            for i in range(len(c[4])):
                c[4][i].reverse()
            c[0][2][0], c[0][2][1], c[0][2][2], c[1][0][0], c[1][0][1], c[1][0][2], c[2][0][-1], c[2][1][-1], c[2][2][
                -1], c[3][0][0], c[3][1][0], c[3][2][0] = c[2][2][-1], c[2][1][-1], c[2][0][-1], c[3][2][0], c[3][1][0], \
                                                          c[3][0][0], c[1][0][0], c[1][0][1], c[1][0][2], c[0][2][0], \
                                                          c[0][2][1], c[0][2][2]
        else:
            c[4] = (list(map(list, list(zip(*c[4])))))
            c[4].reverse()
            c[0][2][0], c[0][2][1], c[0][2][2], c[1][0][0], c[1][0][1], c[1][0][2], c[2][0][-1], c[2][1][-1], c[2][2][
                -1], c[3][0][0], c[3][1][0], c[3][2][0] = c[3][0][0], c[3][1][0], c[3][2][0], c[2][0][-1], c[2][1][-1], \
                                                          c[2][2][-1], c[0][2][2], c[0][2][1], c[0][2][0], c[1][0][2], \
                                                          c[1][0][1], c[1][0][0]

    else:
        if w[1] == '+':
            c[5] = (list(map(list, list(zip(*c[5])))))
            for i in range(len(c[5])):
                c[5][i].reverse()
            c[0][0][0], c[0][0][1], c[0][0][2], c[1][2][0], c[1][2][1], c[1][2][2], c[2][0][0], c[2][1][0], c[2][2][0], \
            c[3][0][-1], c[3][1][-1], c[3][2][-1] = c[3][0][-1], c[3][1][-1], c[3][2][-1], c[2][0][0], c[2][1][0], \
                                                    c[2][2][0], c[0][0][2], c[0][0][1], c[0][0][0], c[1][2][2], c[1][2][
                                                        1], c[1][2][0]
        else:
            c[5] = (list(map(list, list(zip(*c[5])))))
            c[5].reverse()
            c[0][0][0], c[0][0][1], c[0][0][2], c[1][2][0], c[1][2][1], c[1][2][2], c[2][0][0], c[2][1][0], c[2][2][0], \
            c[3][0][-1], c[3][1][-1], c[3][2][-1] = c[2][2][0], c[2][1][0], c[2][0][0], c[3][2][-1], c[3][1][-1], \
                                                    c[3][0][-1], c[1][2][0], c[1][2][1], c[1][2][2], c[0][0][0], \
                                                    c[0][0][1], c[0][0][2]


case_num = int(input())

u = [['w' for i in range(3)] for j in range(3)]
d = [['y' for i in range(3)] for j in range(3)]
l = [['g' for i in range(3)] for j in range(3)]
r = [['b' for i in range(3)] for j in range(3)]
f = [['r' for i in range(3)] for j in range(3)]
b = [['o' for i in range(3)] for j in range(3)]
original = [u, d, l, r, f, b]

answer = []
for _ in range(case_num):
    n = int(input())
    ways = list(input().split())
    cube = copy.deepcopy(original)

    for way in ways:
        rotate(cube, way)

    answer.extend(cube[0])

for i in range(len(answer)):
    print("".join(answer[i]))
